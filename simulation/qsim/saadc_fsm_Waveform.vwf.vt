// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/10/2019 16:54:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    saadc_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module saadc_fsm_vlg_sample_tst(
	clk,
	last_bit,
	reset_bar,
	soc,
	sampler_tx
);
input  clk;
input  last_bit;
input  reset_bar;
input  soc;
output sampler_tx;

reg sample;
time current_time;
always @(clk or last_bit or reset_bar or soc)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module saadc_fsm_vlg_check_tst (
	en,
	en2,
	eoc,
	load,
	sampler_rx
);
input  en;
input  en2;
input  eoc;
input  load;
input sampler_rx;

reg  en_expected;
reg  en2_expected;
reg  eoc_expected;
reg  load_expected;

reg  en_prev;
reg  en2_prev;
reg  eoc_prev;
reg  load_prev;

reg  en_expected_prev;
reg  en2_expected_prev;
reg  eoc_expected_prev;
reg  load_expected_prev;

reg  last_en_exp;
reg  last_en2_exp;
reg  last_eoc_exp;
reg  last_load_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	en_prev = en;
	en2_prev = en2;
	eoc_prev = eoc;
	load_prev = load;
end

// update expected /o prevs

always @(trigger)
begin
	en_expected_prev = en_expected;
	en2_expected_prev = en2_expected;
	eoc_expected_prev = eoc_expected;
	load_expected_prev = load_expected;
end



// expected en
initial
begin
	en_expected = 1'bX;
end 

// expected en2
initial
begin
	en2_expected = 1'bX;
end 

// expected eoc
initial
begin
	eoc_expected = 1'bX;
end 

// expected load
initial
begin
	load_expected = 1'bX;
end 
// generate trigger
always @(en_expected or en or en2_expected or en2 or eoc_expected or eoc or load_expected or load)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected en = %b | expected en2 = %b | expected eoc = %b | expected load = %b | ",en_expected_prev,en2_expected_prev,eoc_expected_prev,load_expected_prev);
	$display("| real en = %b | real en2 = %b | real eoc = %b | real load = %b | ",en_prev,en2_prev,eoc_prev,load_prev);
`endif
	if (
		( en_expected_prev !== 1'bx ) && ( en_prev !== en_expected_prev )
		&& ((en_expected_prev !== last_en_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_en_exp = en_expected_prev;
	end
	if (
		( en2_expected_prev !== 1'bx ) && ( en2_prev !== en2_expected_prev )
		&& ((en2_expected_prev !== last_en2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en2_expected_prev);
		$display ("     Real value = %b", en2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en2_exp = en2_expected_prev;
	end
	if (
		( eoc_expected_prev !== 1'bx ) && ( eoc_prev !== eoc_expected_prev )
		&& ((eoc_expected_prev !== last_eoc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eoc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eoc_expected_prev);
		$display ("     Real value = %b", eoc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_eoc_exp = eoc_expected_prev;
	end
	if (
		( load_expected_prev !== 1'bx ) && ( load_prev !== load_expected_prev )
		&& ((load_expected_prev !== last_load_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port load :: @time = %t",  $realtime);
		$display ("     Expected value = %b", load_expected_prev);
		$display ("     Real value = %b", load_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_load_exp = load_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module saadc_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg last_bit;
reg reset_bar;
reg soc;
// wires                                               
wire en;
wire en2;
wire eoc;
wire load;

wire sampler;                             

// assign statements (if any)                          
saadc_fsm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.en(en),
	.en2(en2),
	.eoc(eoc),
	.last_bit(last_bit),
	.load(load),
	.reset_bar(reset_bar),
	.soc(soc)
);

// reset_bar
initial
begin
	reset_bar = 1'b1;
	reset_bar = #90000 1'b0;
	reset_bar = #140000 1'b1;
	reset_bar = #20000 1'b0;
end 

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// last_bit
initial
begin
	last_bit = 1'b0;
	last_bit = #240000 1'b1;
	last_bit = #10000 1'b0;
	last_bit = #230000 1'b1;
	last_bit = #30000 1'b0;
	last_bit = #280000 1'b1;
	last_bit = #20000 1'b0;
end 

// soc
initial
begin
	soc = 1'b0;
	soc = #110000 1'b1;
	soc = #540000 1'b0;
end 

saadc_fsm_vlg_sample_tst tb_sample (
	.clk(clk),
	.last_bit(last_bit),
	.reset_bar(reset_bar),
	.soc(soc),
	.sampler_tx(sampler)
);

saadc_fsm_vlg_check_tst tb_out(
	.en(en),
	.en2(en2),
	.eoc(eoc),
	.load(load),
	.sampler_rx(sampler)
);
endmodule

